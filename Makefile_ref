CC = mpiicpc
FC = mpiifort
OBJECT_DIR = build
SOURCE_DIR = source
CCFLAGS = -mcmodel=medium -O3 -march=native -qopenmp -qopt-report=4 -fp-model source -std=c++17 -fasm-blocks -g 
FCFLAGS = -mcmodel=medium -O3 -march=native -fp-model source -assume byterecl -ftz -free -qopenmp -Inetcdf/include -I. -module build -align array64byte -g

OBJECTS=$(OBJECT_DIR)/netcdf_mod.o $(OBJECT_DIR)/kinds_mod.o $(OBJECT_DIR)/domain_size.o $(OBJECT_DIR)/constants.o $(OBJECT_DIR)/communicate.o $(OBJECT_DIR)/exit_mod.o $(OBJECT_DIR)/blocks.o $(OBJECT_DIR)/broadcast.o $(OBJECT_DIR)/distribution.o $(OBJECT_DIR)/io_types.o $(OBJECT_DIR)/boundary.o $(OBJECT_DIR)/domain.o $(OBJECT_DIR)/gather_scatter.o $(OBJECT_DIR)/io_netcdf.o $(OBJECT_DIR)/io_binary.o $(OBJECT_DIR)/io.o $(OBJECT_DIR)/global_reductions.o $(OBJECT_DIR)/grid.o $(OBJECT_DIR)/prognostic.o $(OBJECT_DIR)/time_management.o $(OBJECT_DIR)/solver_pcg_mod.o $(OBJECT_DIR)/timers.o $(OBJECT_DIR)/initial.o $(OBJECT_DIR)/pcg.o $(OBJECT_DIR)/pcg_cpp.o

benchmark/pcg.x: $(OBJECTS)
	mpiifort  -o  benchmark/pcg.x -lstdc++ -mcmodel=medium  -lmkl_core -lmkl_intel_lp64 -lmkl_sequential -qopenmp $(OBJECTS) netcdf/lib/libnetcdf.a

$(OBJECT_DIR)/netcdf_mod.o: $(SOURCE_DIR)/netcdf_mod.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/netcdf_mod.f90 -c -o $(OBJECT_DIR)/netcdf_mod.o
$(OBJECT_DIR)/kinds_mod.o: $(SOURCE_DIR)/kinds_mod.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/kinds_mod.f90 -c -o $(OBJECT_DIR)/kinds_mod.o
$(OBJECT_DIR)/domain_size.o: $(SOURCE_DIR)/domain_size.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/domain_size.f90 -c -o $(OBJECT_DIR)/domain_size.o
$(OBJECT_DIR)/constants.o: $(SOURCE_DIR)/constants.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/constants.f90 -c -o $(OBJECT_DIR)/constants.o
$(OBJECT_DIR)/communicate.o: $(SOURCE_DIR)/communicate.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/communicate.f90 -c -o $(OBJECT_DIR)/communicate.o
$(OBJECT_DIR)/exit_mod.o: $(SOURCE_DIR)/exit_mod.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/exit_mod.f90 -c -o $(OBJECT_DIR)/exit_mod.o
$(OBJECT_DIR)/blocks.o: $(SOURCE_DIR)/blocks.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/blocks.f90 -c -o $(OBJECT_DIR)/blocks.o
$(OBJECT_DIR)/broadcast.o: $(SOURCE_DIR)/broadcast.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/broadcast.f90 -c -o $(OBJECT_DIR)/broadcast.o
$(OBJECT_DIR)/distribution.o: $(SOURCE_DIR)/distribution.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/distribution.f90 -c -o $(OBJECT_DIR)/distribution.o
$(OBJECT_DIR)/io_types.o: $(SOURCE_DIR)/io_types.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/io_types.f90 -c -o $(OBJECT_DIR)/io_types.o
$(OBJECT_DIR)/boundary.o: $(SOURCE_DIR)/boundary.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/boundary.f90 -c -o $(OBJECT_DIR)/boundary.o
$(OBJECT_DIR)/domain.o: $(SOURCE_DIR)/domain.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/domain.f90 -c -o $(OBJECT_DIR)/domain.o
$(OBJECT_DIR)/gather_scatter.o: $(SOURCE_DIR)/gather_scatter.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/gather_scatter.f90 -c -o $(OBJECT_DIR)/gather_scatter.o
$(OBJECT_DIR)/io_netcdf.o: $(SOURCE_DIR)/io_netcdf.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/io_netcdf.f90 -c -o $(OBJECT_DIR)/io_netcdf.o
$(OBJECT_DIR)/io_binary.o: $(SOURCE_DIR)/io_binary.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/io_binary.f90 -c -o $(OBJECT_DIR)/io_binary.o
$(OBJECT_DIR)/io.o: $(SOURCE_DIR)/io.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/io.f90 -c -o $(OBJECT_DIR)/io.o
$(OBJECT_DIR)/global_reductions.o: $(SOURCE_DIR)/global_reductions.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/global_reductions.f90 -c -o $(OBJECT_DIR)/global_reductions.o
$(OBJECT_DIR)/grid.o: $(SOURCE_DIR)/grid.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/grid.f90 -c -o $(OBJECT_DIR)/grid.o
$(OBJECT_DIR)/prognostic.o: $(SOURCE_DIR)/prognostic.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/prognostic.f90 -c -o $(OBJECT_DIR)/prognostic.o
$(OBJECT_DIR)/time_management.o: $(SOURCE_DIR)/time_management.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/time_management.f90 -c -o $(OBJECT_DIR)/time_management.o
$(OBJECT_DIR)/solver_pcg_mod.o: $(SOURCE_DIR)/solver_pcg_mod.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/solver_pcg_mod.f90 -c -o $(OBJECT_DIR)/solver_pcg_mod.o
$(OBJECT_DIR)/timers.o: $(SOURCE_DIR)/timers.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/timers.f90 -c -o $(OBJECT_DIR)/timers.o
$(OBJECT_DIR)/initial.o: $(SOURCE_DIR)/initial.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/initial.f90 -c -o $(OBJECT_DIR)/initial.o
$(OBJECT_DIR)/pcg.o: $(SOURCE_DIR)/pcg.f90
	$(FC) $(FCFLAGS) $(SOURCE_DIR)/pcg.f90 -c -o $(OBJECT_DIR)/pcg.o
$(OBJECT_DIR)/pcg_cpp.o: $(SOURCE_DIR)/pcg_cpp.cc
	$(CC) $(CCFLAGS) $(SOURCE_DIR)/pcg_cpp.cc -c -o $(OBJECT_DIR)/pcg_cpp.o
clean:
	rm -f $(OBJECTS)
	rm -f benchmark/pcg.x